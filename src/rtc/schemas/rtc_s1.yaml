runconfig:
    name: str()

    groups:

        primary_executable:

            # Required. Output product type: "RTC_S1" or "RTC_S1_STATIC"
            product_type: enum('RTC_S1', 'RTC_S1_STATIC')

        pge_name_group:
            pge_name: enum('RTC_S1_PGE')

        input_file_group:
            # Required. List of SAFE files (min=1)
            safe_file_path: list(str(), min=1)

            # Location from where the source data can be retrieved (URL or DOI)
            source_data_access: str(required=False)

            # Required. List of orbit (EOF) files
            orbit_file_path: list(str(), min=1)

            # Optional. Burst ID to process (empty for all bursts)
            burst_id: list(str(), min=1, required=False)

        dynamic_ancillary_file_group:
            # Digital Elevation Model.
            dem_file: str(required=False)

            # Digital elevation model description
            dem_file_description: str(required=False)

        static_ancillary_file_group:

            # burst database sqlite file
            burst_database_file: str(required=False)

        product_group:

            processing_type: enum('NOMINAL', 'URGENT', 'CUSTOM', 'UNDEFINED', required=False)

            product_version: any(str(), num(), required=False)

            # Directory where PGE will place results
            product_path: str()
            # Directory where SAS can write temporary data
            scratch_path: str()

            # If option `save_bursts` is set, output bursts are saved to:
            #     {output_dir}/{burst_id}/{product_id}{suffix}.{ext}
            # If option `save_mosaics` is set, output mosaics are saved to:
            #     {output_dir}/{product_id}{suffix}.{ext}
            #
            # If the `product_id` contains the substring "_{burst_id}", the
            # substring will be substituted by either:
            #     - "_" followed by the burst ID, if the product is a burst; or
            #     - An empty string, if the product is a mosaic.
            #
            # For example, the `product_id` = `RTC-S1_{burst_id}_S1B` will become
            # `RTC-S1_069-147170-IW1_S1B` for the burst t069-147170-IW1; and it
            # will become `RTC-S1_S1B` for the mosaic product.
            #
            # For RTC-S1 products, if the field `product_id`` is left empty,
            # the burst product ID will follow the RTC-S1 file naming conventions:
            # `OPERA_L2_RTC-S1_{burst_id}_{sensing_start_datetime}_
            # {processing_datetime}_{sensor}_{pixel_spacing}
            #  _{product_version}`.
            #
            # For RTC-S1-STATIC products, if the field `product_id` is left empty,
            # the burst product ID will follow the RTC-S1-STATIC file naming
            # conventions:
            # `OPERA_L2_RTC-S1-STATIC_{burst_id}_{rtc_s1_static_validity_start_date}_
            # {processing_datetime}_{sensor}_{pixel_spacing}
            #  _{product_version}`.
            #
            # `suffix` is only used when there are multiple output files.
            # `ext` is determined by geocoding_options.output_imagery_format.
            output_dir: str()
            product_id: str(required=False)

            # Validity start date for RTC-S1-STATIC products in the format YYYYMMDD
            rtc_s1_static_validity_start_date: int(min=20000101, max=21991231,required=False)

            # Location from where the output product can be retrieved (URL or DOI)
            product_data_access: str(required=False)

            # Location of the static layers product associated with this product (URL or DOI
            static_layers_data_access: str(required=False)

            # Save RTC-S1 products
            save_bursts: bool(required=False)

            # Save mosaic of RTC-S1 bursts
            save_mosaics: bool(required=False)

            # Save browse image(s)
            save_browse: bool(required=False)

            output_imagery_format: enum('HDF5', 'NETCDF', 'GTiff', 'COG', 'ENVI', required=False)
            output_imagery_compression: str(required=False)
            output_imagery_nbits: int(min=1, required=False)

            # Optional. Save secondary layers (e.g., inc. angle) within 
            # the HDF5 file
            save_secondary_layers_as_hdf5: bool(required=False)

            # Save RTC-S1 metadata in the HDF5 format
            # Optional for `output_imagery_format` equal to 'ENVI', 'GTiff', or
            # 'COG', and enabled by default for `output_imagery_format` equal
            # to 'HDF5' or 'NETCDF' or `save_secondary_layers_as_hdf5` is True
            save_metadata: bool(required=False)

        # This section includes parameters to tweak the workflow
        processing: include('processing_options', required=False)


---
geo2rdr_options:
    # Convergence threshold for rdr2geo algorithm
    threshold: num(min=0, required=False)
    # Maximum number of iterations
    numiter: int(min=1, required=False)

rdr2geo_options:
    # Convergence threshold for rdr2geo algorithm
    threshold: num(min=0, required=False)
    # Maximum number of iterations
    numiter: int(min=1, required=False)

# Group of processing options
processing_options:

    # Check if ancillary inputs cover entirely the output product
    check_ancillary_inputs_coverage: bool(required=False)

    # Polarization channels to process. 3 modes below correspond to VV, VH, VV+VH
    polarization: enum('co-pol', 'cross-pol', 'dual-pol', required=False)

    # Options to run geo2rdr
    geo2rdr: include('geo2rdr_options', required=False)

    # Options to run rdr2geo (for running topo when calculating layover shadow mask)
    rdr2geo: include('rdr2geo_options', required=False)

    # Range split-spectrum options
    range_split_spectrum: include('range_split_spectrum_options', required=False)

    # DEM interpolation method
    dem_interpolation_method: enum('sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

    # Apply absolute radiometric correction
    apply_absolute_radiometric_correction: bool(required=False)

    # Apply thermal noise correction
    apply_thermal_noise_correction: bool(required=False)

    # slant range spacing of the correction LUT in meters
    correction_lut_range_spacing_in_meters: num(required=False)

    # Azimuth time spacing of the correction LUT in meters
    correction_lut_azimuth_spacing_in_meters: num(required=False)

    # Apply RTC
    apply_rtc: bool(required=False)

    # Apply bistatic delay correction
    apply_bistatic_delay_correction: bool(required=False)

    # Apply static tropospheric delay correction
    apply_static_tropospheric_delay_correction: bool(required=False)

    # Radiometric Terrain Correction (RTC)
    rtc: include('rtc_options', required=False)

    # Geocoding options
    geocoding: include('geocoding_options', required=False)

    # Mosaicking options
    mosaicking: include('mosaicking_options', required=False)

    # Browse image
    browse_image_group: include('browse_image_options', required=False)

    # Numper of parallel processes for burst processing
    num_workers: int(required=False)


rtc_options:
    # RTC output type: empty value to turn off the RTC
    # The output_type defaults to "gamma0" if the key is absent
    output_type: enum('gamma0', 'sigma0', required=False)

    algorithm_type: enum('area_projection', 'bilinear_distribution', required=False)

    input_terrain_radiometry: enum('beta0', 'sigma0', required=False)

    # Minimum RTC area factor in dB
    rtc_min_value_db: num(required=False)

    # RTC DEM upsampling
    dem_upsampling: int(min=1, required=False)

    # RTC area beta mode
    area_beta_mode: enum('auto', 'pixel_area', 'projection_angle', required=False)


geocoding_options:

    # OPTIONAL - Apply valid-samples sub-swath masking
    apply_valid_samples_sub_swath_masking: bool(required=False)

    # OPTIONAL - Apply shadow masking
    apply_shadow_masking: bool(required=False)

    # Skip geocoding already processed, which is tested by the existence of the output files
    skip_if_output_files_exist: bool(required=False)

    # Geocoding algorithm type, area projection or interpolation:
    # sinc, bilinear, bicubic, nearest, and biquintic
    algorithm_type: enum('area_projection', 'sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

    # Memory mode
    memory_mode: enum('auto', 'single_block', 'geogrid', 'geogrid_and_radargrid', required=False)

    # Save the incidence angle
    save_incidence_angle: bool(required=False)

    # Save the local-incidence angle
    save_local_inc_angle: bool(required=False)

    # Save the projection angle
    save_projection_angle: bool(required=False)

    # Save the RTC area normalization factor (ANF) computed with
    # the projection angle method
    save_rtc_anf_projection_angle: bool(required=False)

    # Save the range slope angle
    save_range_slope: bool(required=False)

    # Save the number of looks used to generate the RTC-S1 product
    save_nlooks: bool(required=False)

    # Save the RTC area normalization factor (ANF) used to generate
    # the RTC product
    save_rtc_anf: bool(required=False)

    # Save the RTC area normalization factor (ANF) gamma0 to sigma0
    save_rtc_anf_gamma0_to_sigma0: bool(required=False)

    # Save the interpolated DEM used to generate the RTC-S1 product
    save_dem: bool(required=False)

    # Save layover/shadow mask
    save_mask: bool(required=False)

    # Layover/shadow mask dilation size of shadow pixels
    shadow_dilation_size: int(min=0, required=False)

    # OPTIONAL - Absolute radiometric correction
    abs_rad_cal: num(required=False)

    # Clip values above threshold
    clip_max: num(required=False)

    # Clip values below threshold
    clip_min: num(required=False)

    # Double SLC sampling in the range direction
    upsample_radargrid: bool(required=False)

    # Fields to populate the products' metadata required by
    # CEOS Analysis Ready Data specifications
    estimated_geometric_accuracy_bias_x: num(required=False)
    estimated_geometric_accuracy_bias_y: num(required=False)
    estimated_geometric_accuracy_stddev_x: num(required=False)
    estimated_geometric_accuracy_stddev_y: num(required=False)

    # Bursts geographic grid
    bursts_geogrid: include('output_grid_options', required=False)


mosaicking_options:

    # Mosaic mode
    mosaic_mode: enum('average', 'first', 'bursts_center', required=False)

    # Mosaic geographic grid
    mosaic_geogrid: include('output_grid_options', required=False)


output_grid_options:
    # Product EPSG code. If not provided, `output_epsg` will
    # be determined based on the scene center:
    # - If center_lat >= 75.0: 3413
    # - If center_lat <= -75.0: 3031
    # - Otherwise: EPSG code associated with the closest UTM zone
    output_epsg: int(min=1024, max=32767, required=False)

    # Product posting along X (same units as output_epsg)
    x_posting: num(min=0, required=False)

    # Product posting along Y (same units as output_epsg)
    y_posting: num(min=0, required=False)

    # Controls the product grid along X (same units as output_epsg)
    x_snap: num(min=0, required=False)

    # Controls the product grid along Y (same units as output_epsg)
    y_snap: num(min=0, required=False)

    # Top-left coordinates (same units as output_epsg)
    top_left:
      x: num(required=False)
      y: num(required=False)

    # Bottom-right coordinates (same units as output_epsg)
    bottom_right:
      x: num(required=False)
      y: num(required=False)


browse_image_options:

    # If neither height or width parameters are provided, the browse
    # image is generated with the same pixel spacing of the RTC-S1 
    # imagery (burst or mosaic).

    # If the height parameter is provided but the width is not provided,
    # a new width is assigned in order to keep the aspect ratio
    # of the RTC-S1 geographic grid.

    # Conversely, if the width parameter is provided but the height is not,
    # a new height is assigned in order to keep the aspect ratio
    # of the RTC-S1 geographic grid.

    # Height in pixels for the PNG browse image of RTC-S1 bursts.
    browse_image_burst_height: int(min=1, required=False)

    # Width in pixels for the PNG browse image of RTC-S1 bursts
    browse_image_burst_width: int(min=1, required=False)

    # Height in pixels for the PNG browse image of RTC-S1 mosaics.
    browse_image_mosaic_height: int(min=1, required=False)

    # Width in pixels for the PNG browse image of RTC-S1 mosaics
    browse_image_mosaic_width: int(min=1, required=False)
